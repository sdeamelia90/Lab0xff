#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define _USE_MATH_DEFINES
#include <math.h>
#include <time.h>

#define INFINITE 10000000

double bf = 0;
double gd = 0;

//Random Cost Matrix Array
#define MAXN 10000
int VERTICES[MAXN] = { 0 };
double* ptr,
** RANDOMM;

int ROUNDS = 0;
//Coordinate Arrays
double X[MAXN] = { 0 };
double Y[MAXN] = { 0 };

//
int PERMUTATE[MAXN][MAXN] = { 0 };
int CITIES[MAXN];
int PATH[MAXN];

double smallestSum = INFINITE;
double greedyArr[20] = { 0 };
double bruteArr[20] = { 0 };



double expectedDistance(int N) {
    printf("***********************************************************\n");
    printf("Testing Results\n");
    printf("***********************************************************\n");
    double expectedDistance = RANDOMM[PATH[1]][PATH[0]] * N;
    printf("The Expected Cost: %lf\n", expectedDistance);
    return expectedDistance;
}

void fillVertices(int N) {
    for (int i = 0; i < N; i++)
        VERTICES[i] = i;
}

void swap(int* x, int* y)
{
    char temp;
    temp = *x;
    *x = *y;
    *y = temp;
}


//modified from link in video
void permute(int* VERTICES, int l, int r)
{
    double sum = 0;
    int tempCity = 0;
    int i;

    //checks if permutation found
    if (l == r) {
        //calculates the sum of all the edges in found permutation
        for (int j = 0; j < r ; j++) {
            sum = sum + RANDOMM[VERTICES[j]][VERTICES[j + 1]];
            tempCity = VERTICES[r];
        }
        //adds the sum from last node back to start node.
        sum = sum + RANDOMM[tempCity][0];

        //checks if new route is shorter
        if (sum < smallestSum) {
            smallestSum = sum;
            bf = smallestSum;
            //keeps track of new shortest route
            for (int k = 0; k <= r; k++) {
                PATH[k] = VERTICES[k];
            }
            
        }

        sum = 0;
        ROUNDS++;
    }
    else
    {
        //search for next permutation
        for (i = l; i <= r; i++)
        {
            swap((VERTICES + l), (VERTICES + i));
            permute(VERTICES, l + 1, r);
            swap((VERTICES + l), (VERTICES + i));
        }
    }
}

//First Test Matrix
void GenerateRandomCostMatrix(int vNum, int eCostMax) {
    for (int i = 0; i < vNum; i++) {
        for (int j = 0; j < vNum; j++) {
            if (i == j) {
                RANDOMM[i][j] = 0;
            }
            else if (i < j) {
                RANDOMM[i][j] = (rand() % eCostMax);
            }
            else {
                RANDOMM[i][j] = RANDOMM[j][i];
            }
        }
    }
}

//Second Test Matrix
void GenerateRandomEuclideanCostMatrix(int vNum, int maxCoordinate) {
    double edgeWeight = 0;
    for (int i = 0; i < vNum; i++) {
        X[i] = rand() % maxCoordinate;
        Y[i] = rand() % maxCoordinate;
    }

    for (int i = 0; i < vNum; i++) {
        for (int j = 0; j < vNum; j++) {
            edgeWeight = pow(pow(X[i] - X[j], 2) + pow((Y[i] - Y[j]), 2), 0.5);
            RANDOMM[i][j] = edgeWeight;
        }
    }

}

//Shuffles the array vertices
void randomizeArr(int N) {
    int j = 0;
    int temp = 0;

    for (int i = 1; i < N; i++) {
        j = rand() % (N - 1) + 1;
        temp = VERTICES[i];
        VERTICES[i] = VERTICES[j];
        VERTICES[j] = temp;
    }
}

//Third Test Matrix
GenerateRandomCircularGraphCostMatrix(int N, int radius) {
    double edgeWeight = 0;
    double stepAngle = 0;
    fillVertices(N);
    randomizeArr(N);

    for (int i = 0; i < N; i++) {

        stepAngle = 2 * M_PI / N;
        X[VERTICES[i]] = radius * sin(i * stepAngle);
        Y[VERTICES[i]] = radius * cos(i * stepAngle);
    }

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            edgeWeight = pow(pow(X[i] - X[j], 2) + pow((Y[i] - Y[j]), 2), 0.5);
            RANDOMM[i][j] = edgeWeight;
        }
    }


}

void bruteForce(int N) {
    fillVertices(N);
    permute(VERTICES, 1, N - 1);
}

//Finding the nearest node until all nodes are visited once.
void greedy(int N) {
    double totalDistance = 0;
    int cityCount = 0;
    double smallest = INFINITE;
    int min = INT_MAX;
    int tempCity = 0;
    int finalCity = 0;

    //Keep track of which cities are visited. Start at node 0.
    CITIES[0] = 1;

    //Keep track of the Path. Begin at node 0.
    PATH[0] = 0;
    cityCount++;

    //find the smallest edge connected to current node. 
    //Repeat until all nodes have been visited
    for (int i = 0; i < N - 1; i++) {
        for (int j = 0; j < N; j++) {
            //Check if next edge is smaller
            if ((smallest > RANDOMM[tempCity][j]) && (tempCity != j)) {
                //Double check that node has not been visited.
                if (CITIES[j] == 0) {
                    smallest = RANDOMM[tempCity][j];
                    finalCity = j;
                }
            }
        }

        CITIES[finalCity] = 1;
        PATH[cityCount] = finalCity;
        tempCity = finalCity;
        cityCount++;
        totalDistance = totalDistance + smallest;
        smallest = INFINITE;
    }
    //Return to Node 0
    totalDistance = totalDistance + RANDOMM[0][tempCity];

    //Reset count for multiple runs
    for (int i = 0; i < N; i++)
        CITIES[i] = 0;

    smallestSum = totalDistance;
    gd = smallestSum;
}

//Print Matrix
void printMatrix(int vNum) {
    printf("Cost Matrix\n");
    printf("***********************************************************\n");
    for (int i = 0; i < vNum; i++) {
        for (int j = 0; j < vNum; j++) {
            printf("%-6.2lf ", RANDOMM[i][j]);
        }
        printf("\n");
    }
}

void printTest(int vNum) {

}

void printPath(int N, double totalDistance) {
    printf("Path Found Start: ");
    for (int i = 0; i < N; i++) {
        printf("%d ->", PATH[i]);
    }
    printf("%d ->End\n", PATH[N]);
    printf("The Actual Cost: %lf\n", totalDistance);
    printf("***********************************************************\n");

}

void printVertices(int N) {
    printf("***********************************************************\n");
    printf("Vertices Sequence and Coordinates\n");
    printf("***********************************************************\n");
    for (int i = 0; i < N; i++) {

            printf("Vertex: %d  Coordinate: (%.2lf, %.2lf)\n", VERTICES[i], X[VERTICES[i]], Y[VERTICES[i]]);
    }
    printf("***********************************************************\n");
}

void printTable(int timeCount, double TIME[], int sort) {
    printf("%14s %20s %16s %16s \n","  N  ", "Measured Time(s)", "Dbling Ratio", "Expected Ratio");
    printf("======================================================================================================\n");
    int n = 2;
    double doubleRatio = 0;
    double theoryRatio = 0;

    for (int i = 1; i < timeCount; i++) {
        if ((TIME[i - 1] == 0) | (TIME[i - 1] == -0)) {
            doubleRatio = 0;
        }
        else {
            doubleRatio = TIME[i] / TIME[i / 2];
        }
        if (sort == 1) {
            theoryRatio = 4.0;
        }
        else if (sort == 2) {
            theoryRatio = log2(n) / (log2(n) - log2(2));
        }
        else if (sort == 3) {
            theoryRatio = 4.0;
        }
        else if (sort == 4) {
            double temp = 1;
            for (int j = 1; j < n; j++) {
                temp = temp * j;
            }
            double temp2 = 1;

            for (int j = 1; j < n / 2; j++) {
                temp2 = temp2 * j;
            }
            theoryRatio = temp / temp2;
        }

        if (n >= 4) {
            if (n % 2 == 0)
                printf("%12lld %22.8lf %16.2lf %16.2lf\n", (long long int)n, TIME[i], doubleRatio, theoryRatio);
            else {
                char temp = '-';
                printf("%12lld %22.8lf %16c %16c\n", (long long int)n, TIME[i], temp, temp);
            } 
   }
        n++; //change back n = n * 2
    }
}


void TesterFunction() {
    double totalDistance = 0;

    //test input for 1
    int vNum = 5;
    int eCostMax = 5;

    GenerateRandomCostMatrix(vNum, eCostMax);
    printf("Random Cost Matrix: \n");
    printMatrix(vNum);

    //test for Greedy
    greedy(vNum);
    printPath(vNum, totalDistance);

    //test input for 2
    int maxCoordinate = 10;
    GenerateRandomEuclideanCostMatrix(vNum, maxCoordinate);
    printf("Random Euclidean Cost Matrix: \n");
    printMatrix(vNum);

    //test for Greedy
    greedy(vNum);
    printPath(vNum, totalDistance);

    //test input for 3
    int radius = 10;
    GenerateRandomCircularGraphCostMatrix(vNum, radius);
    printf("Random Circular Graph Cost Matrix: \n");
    printMatrix(vNum);

    //test for Greedy
    greedy(vNum);

    printVertices(vNum);
    printPath(vNum, totalDistance);

}


int  main() {


    //Allocate for the cost array
    ///////////////////////////////////////////////////////////////////
    double len = sizeof(double*) * MAXN + sizeof(double) * MAXN * MAXN;
    RANDOMM = (double**)malloc(len);

    ptr = (double*)(RANDOMM + MAXN);

    for (int i = 0; i < MAXN; i++) {
        if (RANDOMM == NULL) {
            exit(0);
        }
        else {
            RANDOMM[i] = (ptr + MAXN * i);
        }
    }
    /////////////////////////////////////////////////////////////////////
    double greedySum = 0;
    double bruteSum = 0;
    int tempCount = 9;
    int n = 4;
    for (int i = 0; i < tempCount; i++) {
        for (int j = 0; j < 5; j++) {
            GenerateRandomEuclideanCostMatrix(n, 100);
            greedy(n);
            greedySum = greedySum + gd;

            bruteForce(n);
            bruteSum = bruteSum + bf;
        }
        n++;
        gd = 0;
        greedyArr[i] = greedySum / 5;
        greedySum = 0;
        bf = 0;
        bruteArr[i] = bruteSum / 5;
        bruteSum = 0;
    }
    n = 4;
    printf("%12s %8s\n", "", "Greedy");
    printf("===========================================================================\n");
    printf("%12s %4s %13s %16s \n", "   N   ", "  Avg Solution Cost  ", "Avg Exact Solution Cost", "Average SQR");
    printf("===========================================================================\n");
    for (int i = 0; i < tempCount; i++) {
        printf("%9d %17.8lf %19.8lf %26.8lf \n", n, greedyArr[i], bruteArr[i], greedyArr[i] / bruteArr[i]);
        n++;
    }


/*
    double totalDistance = 0;
    int vNum = 10;
    int radius = 100;
    GenerateRandomCircularGraphCostMatrix(vNum, radius);
    printVertices(vNum);
    printMatrix(vNum);
    //greedy(vNum);
    bruteForce(vNum);
    double exactDistance = expectedDistance(vNum);
    printPath(vNum, smallestSum);
    /*
    //Testing stuffz
    int vNum = MAXN;

    int radius = 100;
    GenerateRandomCircularGraphCostMatrix(vNum, radius);
    printMatrix(vNum);

    //test for Greedy
    double totalDistance = greedy(vNum);

    printVertices(vNum);
    printPath(vNum, totalDistance);
    */


/*
    long long int trialsCount_max = 10000, // increase as needed to avoid time measurements of zero
        N_min = 1,
        N_max = 10, // adjust as needed, keep small for debugging
        trial;

    clock_t splitTimeStamp,
        trialSetStart;

    double splitTime,
        trialSetCount,
        trialSetTime,
        dummySetCount,
        dummySetTime,
        averageTrialTime,
        averageDummyTrialTime,
        estimatedTimePerTrial;

    double timeArr[1000] = { 0 };

    int timeCount = 0,
        sort = 0;

    int eCostMax = 20;
    int n;
    double trialsTime_max = .250; // in seconds
    double distanceArr[1000] = { 0 };

    // For each size N of input we want to test -- typically start N at 1 and double each repetition

        for (n = 1; n < N_max; n++) { ///*********************** CHANGE THIS BACK*(

            // any preparations, test input generation, to be used for entire trial set


            splitTime = 0.0;

            // get timestamp before set of trials are run:

            trialSetStart = clock();

            // For each trial trialNumber=1 to Number of Trials per input size:

            for (trial = 0; trial < trialsCount_max && splitTime < trialsTime_max; trial++) {


                GenerateRandomCostMatrix(n, 100);


                    splitTimeStamp = clock(); //
                splitTime = (splitTimeStamp - (double)trialSetStart) / (double)CLOCKS_PER_SEC; // CLOCK_PER_SEC define time.h

            }

            trialSetCount = (double)trial; // value of trial when loop ends is how many we did

            trialSetTime = splitTime; // total time for trial set is the last split time

            averageTrialTime = trialSetTime / trialSetCount; // this is the average tiem per trial, including any prep/overhead



            splitTime = 0.0;

            // get timestamp before set of dummy trials are run:

            trialSetStart = clock();

            for (trial = 0; trial < trialSetCount && splitTime < trialsTime_max; trial++) {

                GenerateRandomCircularGraphCostMatrix(n, eCostMax);

                splitTimeStamp = clock(); //
                splitTime = (splitTimeStamp - (double)trialSetStart) / (double)CLOCKS_PER_SEC; // CLOCK_PER_SEC define time.h

            }

            dummySetCount = (double)trial; // value of trial when loop ends is how many we did, should be same as trialsSetCount

            dummySetTime = splitTime; // total time for dummy trial set is the last split time

            averageDummyTrialTime = dummySetTime / dummySetCount; // this is the average tiem per dummy trial, including any prep/overhead

            estimatedTimePerTrial = averageTrialTime - averageDummyTrialTime; // should be a decent measurement of time taken to run your algorithm


            timeArr[timeCount] = estimatedTimePerTrial;
            distanceArr[timeCount] = smallestSum;
            timeCount++;
        }
*/
    //printTable(timeCount, timeArr, 4);


    free(RANDOMM);

}
